{"version":3,"sources":["views/nav.js","App.js","serviceWorker.js","index.js","graphs/DepGraph.js"],"names":["React","require","Tab","Tabs","NavTabs","Component","render","routes","this","props","createElement","id","activeKey","activeRoute","onSelect","onNavigate","map","route","key","eventKey","title","DepGraph","bundles","js-tendermint","bundleNames","Object","keys","App","constructor","super","state","mode","bundle","selectMode","target","setState","selectBundle","bundleData","react_default","a","className","nav","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ObservableStore","GraphContainer","ForceGraph","util","createNode","createLink","createModuleGraph","nodes","links","forEach","parentId","file","packageName","deps","size","entry","label","color","push","radius","depName","childId","source","link","module","exports","graph","container","width","height","graphStore","componentDidMount","updateGraph","componentWillReceiveProps","nextProps","packageData","pack","assign","values","createPackageGraph","createGraphByMode","updateState","onResize","actions","selectNode","console","log","ref","containerRef","onSize","createStyle"],"mappings":"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","file":"static/js/main.4f15f387.chunk.js","sourcesContent":["import './bootstrap.css';\nconst React = require('react')\nconst Tab = require('react-bootstrap/Tab')\nconst Tabs = require('react-bootstrap/Tabs')\n\nclass NavTabs extends React.Component {\n  render() {\n    const { routes } = this.props\n    return (\n      <Tabs\n        id=\"navigation-tabs\"\n        activeKey={this.props.activeRoute}\n        onSelect={this.props.onNavigate}\n      >\n        {routes.map(route => (\n          <Tab key={route} eventKey={route} title={route}></Tab>\n        ))}\n      </Tabs>\n    )\n  }\n}\n\nexport default NavTabs","import React, { Component } from 'react'\nimport './App.css'\nimport Nav from './views/nav'\nconst DepGraph = require('./graphs/DepGraph')\n\nconst bundles = {\n  'js-tendermint': require('./data/deps.json'),\n}\nconst bundleNames = Object.keys(bundles)\n\nconst routes = ['packages', 'modules']\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      mode: routes[0],\n      bundle: 'js-tendermint',\n    }\n  }\n\n  selectMode (target) {\n    this.setState(state => ({ mode: target }))\n  }\n\n  selectBundle (target) {\n    this.setState(state => ({ bundle: target }))\n  }\n\n  render () {\n    const bundleData = bundles[this.state.bundle]\n    return (\n      <div className=\"App\">\n        <Nav\n          routes={bundleNames}\n          activeRoute={this.state.bundle}\n          onNavigate={(target) => this.selectBundle(target)}\n          />\n        <Nav\n          routes={routes}\n          activeRoute={this.state.mode}\n          onNavigate={(target) => this.selectMode(target)}\n          />\n        <DepGraph\n          bundleData={bundleData}\n          mode={this.state.mode}\n          /> \n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const React = require('react')\nconst ObservableStore = require('obs-store')\nconst { GraphContainer, ForceGraph, util: { createNode, createLink } } = require('react-force-directed')\n\n\nclass DepGraph extends React.Component {\n\n  constructor () {\n    super()\n    // prepare empty graph\n    this.graph = { nodes: [], links: [], container: { width: 0, height: 0 } }\n    // contain graph in observable store\n    this.graphStore = new ObservableStore(this.graph)\n  }\n\n  componentDidMount () {\n    // generate graph\n    const { bundleData, mode } = this.props\n    this.updateGraph(bundleData, mode)\n  }\n\n  componentWillReceiveProps (nextProps) {\n    // recalculate graph if `mode` or `bundleData` change\n    if (this.props.mode !== nextProps.mode || this.props.bundleData !== nextProps.bundleData) {\n      const { bundleData, mode } = nextProps\n      this.updateGraph(bundleData, mode)\n    }\n  }\n\n  updateGraph (bundleData, mode) {\n    const { nodes, links } = createGraphByMode(bundleData, mode)\n    this.graphStore.updateState({ nodes, links })\n  }\n\n  onResize (size) {\n    this.graphStore.updateState({ container: size })\n  }\n\n  render () {\n    const actions = {\n      selectNode: console.log\n    }\n\n    return (\n      <div className=\"fullSize\" ref={this.containerRef}>\n        <GraphContainer onSize={size => this.onResize(size)}>\n          <ForceGraph graphStore={this.graphStore} actions={actions}/>\n        </GraphContainer>\n        {ForceGraph.createStyle()}\n      </div>\n    )\n  }\n}\n\nmodule.exports = DepGraph\n\nfunction labelForFileSize (size) {\n  const fileSizeOrder = Math.floor((Math.log(size)/Math.log(10))/3)\n  const fileSizeUnit = ['b','kb','mb'][fileSizeOrder]\n  const fileSizeForUnit = size / Math.pow(10, fileSizeOrder * 3)\n  const fileSizeForUnitFormatted = (size > 1000) ? fileSizeForUnit.toFixed(1) : fileSizeForUnit\n  const fileSizeLabel = `${fileSizeForUnitFormatted} ${fileSizeUnit}`\n  return fileSizeLabel\n}\n\nfunction createGraphByMode (bundleData, mode) {\n  // create graph for mode\n  if (mode === 'modules') {\n    return createModuleGraph(bundleData)\n  } else {\n    return createPackageGraph(bundleData)\n  }\n}\n\nfunction createPackageGraph (bundleData) {\n  const packageData = {}\n  \n  // create a fake `bundleData` using the packages\n  Object.keys(bundleData).forEach(parentId => {\n    const module = bundleData[parentId]\n    const { packageName } = module\n    let pack = packageData[packageName]\n    // if first module in package, initialize with module\n    if (!pack) {\n      pack = Object.assign({}, module)\n      pack.file = `${packageName} files`\n      pack.entry = (packageName === '<entry>')\n      pack.deps = {}\n      packageData[packageName] = pack\n    } else {\n      // package already exists, just need add size (deps added later)\n      const { size } = module\n      pack.size += size\n    }\n    // add deps\n    Object.values(module.deps).forEach(id => {\n      // use `id` so that there are not redundant links. the actual key is not important.\n      pack.deps[id] = id\n    })\n  })\n\n  return createModuleGraph(packageData)\n}\n\nfunction createModuleGraph (bundleData) {\n  const nodes = [], links = []\n\n  // for each module, create node and links \n  Object.keys(bundleData).forEach(parentId => {\n    const { file, packageName, deps, size, entry } = bundleData[parentId]\n    const scale = 1 / 20\n    // const radius = scale * Math.sqrt(size)\n    const radius = 5\n    // const radius = 5\n    // const fileSizeLabel = labelForFileSize(size)\n    // const label = `${fileSizeLabel} ${packageName}\\n${file}`\n    const label = `${packageName}\\n${file}`\n    const isEntryPackage = packageName === '<entry>'\n    // entry module is orange\n    // entry pacakge (app code) is blue\n    // deps are green\n    let color = entry ? 'orange' : (isEntryPackage ? 'blue' : 'green')\n    // create node for modules\n    nodes.push(\n      createNode({ id: parentId, radius, label, color })\n    )\n    // create links for deps\n    Object.keys(deps).forEach(depName => {\n      const childId = deps[depName]\n      links.push(\n        createLink({ source: parentId, target: childId })\n      )\n    })\n  })\n\n  // handle missing nodes (e.g. external deps)\n  links.forEach(link => {\n    if (!bundleData[link.target]) {\n      nodes.push(\n        createNode({ id: link.target, radius: 0 })\n      )\n    }\n  })\n\n  return { nodes, links }\n}"],"sourceRoot":""}